Timer unit: 1e-06 s

Total time: 21.3325 s
File: src/main.py
Function: main at line 69

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    69                                           @profile
    70                                           def main():
    71                                           
    72                                               # Grab command line args
    73         1       1380.0   1380.0      0.0      args = build_argparser().parse_args()
    74         1          3.0      3.0      0.0      logger = logging.getLogger()
    75         1          0.0      0.0      0.0      inputFilePath = args.input
    76         1          1.0      1.0      0.0      inputFeeder = None
    77         1          1.0      1.0      0.0      inference_time = None
    78                                               
    79         1          1.0      1.0      0.0      if inputFilePath.lower()=="cam":
    80                                                       inputFeeder = InputFeeder("cam")
    81                                               else:
    82         1         12.0     12.0      0.0          if not os.path.isfile(inputFilePath):
    83                                                       logger.error("Unable to find specified video file")
    84                                                       exit(1)
    85         1          5.0      5.0      0.0          inputFeeder = InputFeeder("video",inputFilePath)
    86                                               #else:
    87                                               #	if not os.path.isfile(inputFilePath):
    88                                               #       logger.error("Unable to find specified image file")
    89                                               #       exit(1)
    90                                               #   inputFeeder = InputFeeder("image",inputFilePath)
    91                                           
    92                                               # Initialize variables with the input arguments
    93         1          1.0      1.0      0.0      modelPathDict = {'FaceDetectionModel': args.faceDetectionModel,
    94         1          0.0      0.0      0.0      				 'FacialLandmarksDetectionModel': args.FacialLandmarksDetectionModel, 
    95         1          1.0      1.0      0.0      				 'GazeEstimationModel': args.gazeEstimationModel, 
    96         1          1.0      1.0      0.0      				 'HeadPoseEstimationModel': args.HeadPoseEstimationModel}
    97                                             
    98         5          3.0      0.6      0.0      for fileNameKey in modelPathDict.keys():
    99         4         20.0      5.0      0.0          if not os.path.isfile(modelPathDict[fileNameKey]):
   100                                                       logger.error("Unable to find specified "+fileNameKey+" xml file")
   101                                                       exit(1)
   102                                                       
   103         1     217939.0 217939.0      1.0      fdm = FaceDetectionModel(modelPathDict['FaceDetectionModel'], args.device, args.cpu_extension)
   104         1         34.0     34.0      0.0      flm = FacialLandmarksDetectionModel(modelPathDict['FacialLandmarksDetectionModel'], args.device, args.cpu_extension)
   105         1         10.0     10.0      0.0      gem = GazeEstimationModel(modelPathDict['GazeEstimationModel'], args.device, args.cpu_extension)
   106         1          8.0      8.0      0.0      hpe = HeadPoseEstimationModel(modelPathDict['HeadPoseEstimationModel'], args.device, args.cpu_extension)
   107         1          7.0      7.0      0.0      mc = MouseController('high','fast')
   108                                            			
   109                                            	  
   110         1      37690.0  37690.0      0.2      inputFeeder.load_data()
   111                                                  
   112                                               # Load Models and generate load times
   113                                               
   114         1          7.0      7.0      0.0      start_time = time.time()
   115         1     172272.0 172272.0      0.8      fdm.load_model()
   116         1        207.0    207.0      0.0      logger.error("Face detection model loaded: time: {:.3f} ms".format((time.time() - start_time) * 1000))
   117         1          2.0      2.0      0.0      first_mark = time.time()
   118         1      49446.0  49446.0      0.2      flm.load_model()
   119         1        221.0    221.0      0.0      logger.error("Facial landmarks detection model loaded: time: {:.3f} ms".format((time.time() - first_mark) * 1000))
   120         1          2.0      2.0      0.0      second_mark = time.time()
   121         1      64043.0  64043.0      0.3      hpe.load_model()
   122         1        158.0    158.0      0.0      logger.error("Head pose estimation model loaded: time: {:.3f} ms".format((time.time() - second_mark) * 1000))
   123         1          2.0      2.0      0.0      third_mark = time.time()
   124         1      76842.0  76842.0      0.4      gem.load_model()
   125         1        194.0    194.0      0.0      logger.error("Gaze estimation model loaded: time: {:.3f} ms".format((time.time() - third_mark) * 1000))
   126         1          2.0      2.0      0.0      load_total_time = time.time() - start_time
   127         1         91.0     91.0      0.0      logger.error("Total loading time: time: {:.3f} ms".format(load_total_time * 1000))
   128         1         78.0     78.0      0.0      logger.error("Required models have been loaded..")
   129                                              
   130         1          1.0      1.0      0.0      frame_count = 0
   131         1          1.0      1.0      0.0      start_inf_time = time.time()
   132        60    2737303.0  45621.7     12.8      for ret, frame in inputFeeder.next_batch():
   133        60        190.0      3.2      0.0          if not ret:
   134         1          7.0      7.0      0.0              break
   135        59        126.0      2.1      0.0          frame_count+=1
   136        59        132.0      2.2      0.0          if frame_count%5==0:
   137        11      66872.0   6079.3      0.3              cv2.imshow('video',cv2.resize(frame,(600,800)))
   138                                               
   139        59    3587736.0  60809.1     16.8          key = cv2.waitKey(60)
   140        59    1044676.0  17706.4      4.9          croppedFace, face_coords = fdm.predict(frame.copy(), args.prob_threshold)
   141        59        206.0      3.5      0.0          if type(croppedFace)==int:
   142                                                       logger.error("Unable to detect the face.")
   143                                                       if key==27:
   144                                                           break
   145                                                       continue
   146        59         81.0      1.4      0.0          if frame_count%5==0:
   147        11   12964261.0 1178569.2     60.8              mc.move(new_mouse_coord[0],new_mouse_coord[1])
   148                                           
   149        59     127926.0   2168.2      0.6          hp_out = hpe.predict(croppedFace.copy())
   150        59      67567.0   1145.2      0.3          left_eye, right_eye, eye_coords = flm.predict(croppedFace.copy())
   151        59     109076.0   1848.7      0.5          new_mouse_coord, gaze_vector = gem.predict(left_eye, right_eye, hp_out)         
   152                                                       
   153         1         66.0     66.0      0.0      inference_time = round(time.time() - start_inf_time, 1)
   154         1          2.0      2.0      0.0      total_frames = int(frame_count)
   155         1          2.0      2.0      0.0      fps = int(frame_count) / (inference_time)
   156         1        236.0    236.0      0.0      logger.error("count {} seconds".format(frame_count))
   157         1         96.0     96.0      0.0      logger.error("total inference time {} seconds".format(inference_time))
   158         1         82.0     82.0      0.0      logger.error("total frames {} frames".format(frame_count))
   159         1         81.0     81.0      0.0      logger.error("fps {} frame/second".format(fps))
   160                                               
   161         1        186.0    186.0      0.0      with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'RunReport.txt'), 'w') as R:
   162         1          4.0      4.0      0.0      	R.write('Load Time: '+ str(load_total_time) + '\n') 
   163         1          2.0      2.0      0.0      	R.write('Inference Time :' + str(inference_time) + '\n')
   164         1          1.0      1.0      0.0      	R.write('total frames processed' + str(total_frames) +'\n')
   165         1        189.0    189.0      0.0      	R.write('fps: ' + str(fps) + '\n')          
   166         1         98.0     98.0      0.0      logger.error("VideoStream ended...")
   167         1        842.0    842.0      0.0      cv2.destroyAllWindows()
   168         1       3720.0   3720.0      0.0      inputFeeder.close() 
   169         1          8.0      8.0      0.0      atexit.register(profile.print_stats)   

